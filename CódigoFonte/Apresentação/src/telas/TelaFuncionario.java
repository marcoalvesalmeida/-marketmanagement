/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package telas;

import br.edu.ifnmg.marketmanagement.aplicacao.Funcionario;
import br.edu.ifnmg.marketmanagement.aplicacao.FuncionarioRepositorio;
import br.edu.ifnmg.marketmanagement.aplicacao.RepositorioBuilder;
import br.edu.ifnmg.marketmanagement.aplicacao.ViolacaoRegraNegocioException;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.Font.FontFamily;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Desktop;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.MaskFormatter;

/**
 *
 * @author guilherme
 */
public class TelaFuncionario extends TelaBuscar<Funcionario> {

    /**
     * Creates new form TelaFuncionariod
     */
    public TelaFuncionario() {
        initComponents();
        groupRadio();
        setEditar(new TelaEditarFuncionario());
        setRepositorio(RepositorioBuilder.getFuncionarioRepositorio());
    }
    
     private MaskFormatter maskCpf;
    private MaskFormatter maskNome;
    

    DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
    DateFormat dfy = new SimpleDateFormat("dd_MM_yyyy");
    DateFormat hf = new SimpleDateFormat("hh:mm:ss");

    private void groupRadio() {
        grupo1.add(rdTodos);
        grupo1.add(rdCpf);
        grupo1.add(rdNome1);
        rdTodos.setSelected(true);
        txtPesquisa.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupo1 = new javax.swing.ButtonGroup();
        jPanel3 = new javax.swing.JPanel();
        btnEditar = new javax.swing.JButton();
        btnNovo = new javax.swing.JButton();
        btnRelatorio = new javax.swing.JButton();
        lblTexto = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        rdTodos = new javax.swing.JRadioButton();
        rdCpf = new javax.swing.JRadioButton();
        rdNome1 = new javax.swing.JRadioButton();
        btnPesquisa = new javax.swing.JButton();
        txtPesquisa = new javax.swing.JFormattedTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbResultado = new javax.swing.JTable();

        setClosable(true);
        setTitle("Buscar Funcionário");

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(160, 160, 160)));

        btnEditar.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnNovo.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        btnNovo.setText("Novo");
        btnNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovoActionPerformed(evt);
            }
        });

        btnRelatorio.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        btnRelatorio.setText("Relatório");
        btnRelatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRelatorioActionPerformed(evt);
            }
        });

        lblTexto.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        lblTexto.setText("Pesquisar cadastro já existente por Nome:");

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(185, 185, 185)), "Modos de Pesquisa"));

        rdTodos.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        rdTodos.setText("Todos");
        rdTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdTodosActionPerformed(evt);
            }
        });

        rdCpf.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        rdCpf.setText("CPF");
        rdCpf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdCpfActionPerformed(evt);
            }
        });

        rdNome1.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        rdNome1.setText("Nome");
        rdNome1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdNome1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(rdTodos)
                .addGap(85, 85, 85))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rdNome1)
                    .addComponent(rdCpf))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(rdTodos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdNome1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdCpf)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnPesquisa.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        btnPesquisa.setText("Pesquisar");
        btnPesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisaActionPerformed(evt);
            }
        });
        
          try{
			maskCpf = new MaskFormatter("###.###.###-##");
			maskNome = new MaskFormatter("************************************");
		}catch(Exception ex){
			System.out.println(ex);
			
		}
		
		    rdCpf.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    txtPesquisa.setEnabled(true);
                    txtPesquisa.setValue(null);
                    txtPesquisa.setFormatterFactory(new DefaultFormatterFactory(maskCpf));
                }
            }
        });
        
            rdNome1.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    txtPesquisa.setEnabled(true);
                    txtPesquisa.setValue(null);
                    txtPesquisa.setFormatterFactory(new DefaultFormatterFactory(maskNome));
                }
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblTexto)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(btnNovo, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnRelatorio, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtPesquisa))
                .addGap(20, 20, 20)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(lblTexto)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnNovo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRelatorio, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        tbResultado.setBorder(null);
        tbResultado.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        tbResultado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tbResultado.setGridColor(new java.awt.Color(254, 254, 254));
        tbResultado.setRowMargin(0);
        jScrollPane1.setViewportView(tbResultado);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisaActionPerformed
        buscar();
    }//GEN-LAST:event_btnPesquisaActionPerformed

    private void btnNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovoActionPerformed
        novo();
    }//GEN-LAST:event_btnNovoActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        int linha = tbResultado.getSelectedRow();
        if (linha < 0) {
            JOptionPane.showMessageDialog(rootPane, "É necessário selecionar um cliente!");
            return;
        }
        long id = Long.parseLong(tbResultado.getValueAt(linha, 0).toString());
        editar(id);
    }//GEN-LAST:event_btnEditarActionPerformed

    private void rdTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdTodosActionPerformed
        txtPesquisa.setEnabled(false);
        lblTexto.setText("Pesquisar cadastro já existente: ");
    }//GEN-LAST:event_rdTodosActionPerformed

    private void rdCpfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdCpfActionPerformed
        txtPesquisa.setEnabled(true);
        lblTexto.setText("Pesquisar cadastro já existente por CPF: ");
    }//GEN-LAST:event_rdCpfActionPerformed

    private void btnRelatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRelatorioActionPerformed
        String hora = hf.format(new Date());
        String titledoc = "Funcionarios_Geral_" + dfy.format(new Date()) +"_"+hora+".pdf";
        int linha = tbResultado.getSelectedRow();
        if (linha < 0) {
            if (JOptionPane.showConfirmDialog(this, "Você deseja realmente realizar o relatório de todos os funcioários?", "Atenção",
                    JOptionPane.YES_NO_OPTION) == 0) {
                Document doc = new Document();
                try {
                    FuncionarioRepositorio funcionarios = RepositorioBuilder.getFuncionarioRepositorio();
                    List<Funcionario> dados = (ArrayList) funcionarios.buscar(null);
                    PdfWriter.getInstance(doc, new FileOutputStream(titledoc));
                    doc.open();
                    PdfPTable table = new PdfPTable(1);
                    Paragraph titulo = new Paragraph("RELATÓRIO GERAL DE FUNCIONÁRIOS ", new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD));
                    titulo.setIndentationLeft(60);
                    PdfPCell tituloCell = new PdfPCell(titulo);
                    table.addCell(tituloCell);
                    for (Funcionario f : dados) {
                        Paragraph nome = new Paragraph("Nome: " + f.getNome(),new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD));
                        nome.setIndentationLeft(20);
                        PdfPCell nomeCell = new PdfPCell();
                        nomeCell.addElement(nome);
                        table.addCell(nomeCell);
                        Paragraph cpf = new Paragraph("CPF: " + f.getCpf());
                        cpf.setIndentationLeft(20);
                        PdfPCell cpfCell = new PdfPCell();
                        cpfCell.addElement(cpf);
                        table.addCell(cpfCell);
                        Paragraph rg = new Paragraph("RG: " + f.getRg());
                        rg.setIndentationLeft(20);
                        PdfPCell rgCell = new PdfPCell();
                        rgCell.addElement(rg);
                        table.addCell(rgCell);
                        Paragraph nasc = new Paragraph("NASCIMENTO: " + df.format(f.getDataNascimento()));
                        nasc.setIndentationLeft(20);
                        PdfPCell nascCell = new PdfPCell();
                        nascCell.addElement(nasc);
                        table.addCell(nascCell);
                        Paragraph email = new Paragraph("E-MAIL: " +  f.getEmail());
                        email.setIndentationLeft(20);
                        PdfPCell emailCell = new PdfPCell();
                        emailCell.addElement(email);
                        table.addCell(emailCell);
                        Paragraph end = new Paragraph("ENDEREÇO: " + "Rua " +   f.getEndereco().getRua() + " " + f.getEndereco().getCidade() + "-"+ f.getEndereco().getUf() + " " + f.getEndereco().getCep());
                        end.setIndentationLeft(20);
                        PdfPCell endCell = new PdfPCell();
                        endCell.addElement(end);
                        table.addCell(endCell);
                        Paragraph tel1 = new Paragraph("TELEFONE: " + f.getTelefone());
                        tel1.setIndentationLeft(20);
                        PdfPCell tel1Cell = new PdfPCell();
                        tel1Cell.addElement(tel1);
                        table.addCell(tel1Cell);
                        Paragraph tel2 = new Paragraph("CELULAR: " + f.getCelular());
                        tel2.setIndentationLeft(20);
                        PdfPCell tel2Cell = new PdfPCell();
                        tel2Cell.addElement(tel2);
                        table.addCell(tel2Cell);
                        Paragraph func = new Paragraph("FUNÇÃO: " + f.getFuncao());
                        func.setIndentationLeft(20);
                        PdfPCell funcCell = new PdfPCell();
                        funcCell.addElement(func);
                        table.addCell(funcCell);
                        if(f.getCnh() != null && !f.getCnh().isEmpty()){
                            Paragraph cnh = new Paragraph("CNH: " + f.getCnh());
                            cnh.setIndentationLeft(20);
                            PdfPCell cnhCell = new PdfPCell();
                            cnhCell.addElement(cnh);
                            table.addCell(cnhCell);
                        }
                        Paragraph ch = new Paragraph("CARGA HORÁRIA: " + f.getCargaHoraria());
                        ch.setIndentationLeft(20);
                        PdfPCell chCell = new PdfPCell();
                        chCell.addElement(ch);
                        table.addCell(chCell);
                        Paragraph sal = new Paragraph("SALÁRIO: " + f.getSalario());
                        sal.setIndentationLeft(20);
                        PdfPCell salCell = new PdfPCell();
                        salCell.addElement(sal);
                        table.addCell(salCell);                     
                        
                    }
                    doc.add(table);
                    Paragraph rodape = new Paragraph("Relatório gerado em " + df.format(new Date()) + " às " + hora);
                    rodape.setSpacingBefore(30f);
                    rodape.setIndentationLeft(130f);
                    doc.add(rodape);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(MenuPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                } catch (DocumentException ex) {
                    Logger.getLogger(TelaFuncionario.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    doc.close();
                }

                try {
                    Desktop.getDesktop().open(new File(titledoc));
                } catch (IOException ex) {
                    Logger.getLogger(MenuPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
                JOptionPane.showMessageDialog(rootPane, "Relatório gerado com sucesso!");
            }
        }else{
            long id = Long.parseLong(tbResultado.getValueAt(linha, 0).toString());
            Funcionario f = new Funcionario();
            FuncionarioRepositorio v = RepositorioBuilder.getFuncionarioRepositorio();
            f = v.abrir(id);
            Document doc = new Document();
        try {
            PdfWriter.getInstance(doc, new FileOutputStream("relatoriofuncionario.pdf"));
            doc.open();
             PdfPTable table = new PdfPTable(1);
        Paragraph titulo = new Paragraph("RELATÓRIO GERAL DE FUNCIONÁRIOS ",new Font(FontFamily.HELVETICA, 12, Font.BOLD));
        titulo.setIndentationLeft(60);
        PdfPCell tituloCell = new PdfPCell(titulo);
        table.addCell(tituloCell);
   
        Paragraph nome = new Paragraph("Nome: " + f.getNome(),new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD));
                        nome.setIndentationLeft(20);
                        PdfPCell nomeCell = new PdfPCell();
                        nomeCell.addElement(nome);
                        table.addCell(nomeCell);
                        Paragraph cpf = new Paragraph("CPF: " + f.getCpf());
                        cpf.setIndentationLeft(20);
                        PdfPCell cpfCell = new PdfPCell();
                        cpfCell.addElement(cpf);
                        table.addCell(cpfCell);
                        Paragraph rg = new Paragraph("RG: " + f.getRg());
                        rg.setIndentationLeft(20);
                        PdfPCell rgCell = new PdfPCell();
                        rgCell.addElement(rg);
                        table.addCell(rgCell);
                        Paragraph nasc = new Paragraph("NASCIMENTO: " + df.format(f.getDataNascimento()));
                        nasc.setIndentationLeft(20);
                        PdfPCell nascCell = new PdfPCell();
                        nascCell.addElement(nasc);
                        table.addCell(nascCell);
                        Paragraph email = new Paragraph("E-MAIL: " +  f.getEmail());
                        email.setIndentationLeft(20);
                        PdfPCell emailCell = new PdfPCell();
                        emailCell.addElement(email);
                        table.addCell(emailCell);
                        Paragraph end = new Paragraph("ENDEREÇO: " + "Rua " +   f.getEndereco().getRua() + " " + f.getEndereco().getCidade() + "-"+ f.getEndereco().getUf() + " " + f.getEndereco().getCep());
                        end.setIndentationLeft(20);
                        PdfPCell endCell = new PdfPCell();
                        endCell.addElement(end);
                        table.addCell(endCell);
                        Paragraph tel1 = new Paragraph("TELEFONE: " + f.getTelefone());
                        tel1.setIndentationLeft(20);
                        PdfPCell tel1Cell = new PdfPCell();
                        tel1Cell.addElement(tel1);
                        table.addCell(tel1Cell);
                        Paragraph tel2 = new Paragraph("CELULAR: " + f.getCelular());
                        tel2.setIndentationLeft(20);
                        PdfPCell tel2Cell = new PdfPCell();
                        tel2Cell.addElement(tel2);
                        table.addCell(tel2Cell);
                        Paragraph func = new Paragraph("FUNÇÃO: " + f.getFuncao());
                        func.setIndentationLeft(20);
                        PdfPCell funcCell = new PdfPCell();
                        funcCell.addElement(func);
                        table.addCell(funcCell);
                        if(f.getCnh() != null && !f.getCnh().isEmpty()){
                            Paragraph cnh = new Paragraph("CNH: " + f.getCnh());
                            cnh.setIndentationLeft(20);
                            PdfPCell cnhCell = new PdfPCell();
                            cnhCell.addElement(cnh);
                            table.addCell(cnhCell);
                        }
                        Paragraph ch = new Paragraph("CARGA HORÁRIA: " + f.getCargaHoraria());
                        ch.setIndentationLeft(20);
                        PdfPCell chCell = new PdfPCell();
                        chCell.addElement(ch);
                        table.addCell(chCell);
                        Paragraph sal = new Paragraph("SALÁRIO: " + f.getSalario());
                        sal.setIndentationLeft(20);
                        PdfPCell salCell = new PdfPCell();
                        salCell.addElement(sal);
                        table.addCell(salCell);     
               doc.add(table);
                    Paragraph rodape = new Paragraph("Relatório gerado em " + df.format(new Date()) + " às " + hora);
                    rodape.setSpacingBefore(30f);
                    rodape.setIndentationLeft(130f);
                    doc.add(rodape);
        } catch (FileNotFoundException | DocumentException ex) {
            Logger.getLogger(MenuPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }finally{
            doc.close();
        }
        
        try {
            Desktop.getDesktop().open(new File("relatoriofuncionario.pdf"));
        } catch (IOException ex) {
            Logger.getLogger(MenuPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
    }//GEN-LAST:event_btnRelatorioActionPerformed

    private void rdNome1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdNome1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdNome1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnNovo;
    private javax.swing.JButton btnPesquisa;
    private javax.swing.JButton btnRelatorio;
    private javax.swing.ButtonGroup grupo1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTexto;
    private javax.swing.JRadioButton rdCpf;
    private javax.swing.JRadioButton rdNome1;
    private javax.swing.JRadioButton rdTodos;
    private javax.swing.JTable tbResultado;
    private javax.swing.JFormattedTextField txtPesquisa;
    // End of variables declaration//GEN-END:variables

    @Override
    protected void preencherTabela(List<Funcionario> dados) {
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID");
        modelo.addColumn("NOME");
        modelo.addColumn("NASCIMENTO");
        modelo.addColumn("CPF");
        modelo.addColumn("CARGA HORÁRIA");
        modelo.addColumn("TELEFONE");
        modelo.addColumn("EMAIL");
        for (Funcionario c : dados) {
            Vector valores = new Vector();
            valores.add(c.getId());
            valores.add(c.getNome());
            valores.add(df.format(c.getDataNascimento().getTime()));
            valores.add(c.getCpf());
            valores.add(c.getCargaHoraria());
            valores.add(c.getTelefone());
            valores.add(c.getEmail());
            modelo.addRow(valores);
        }
        tbResultado.setModel(modelo);
    }

    @Override
    protected Funcionario carregaFiltro() {
        try{           
            Funcionario filtro = new Funcionario();
            if(!txtPesquisa.getText().isEmpty()){                
                if (rdNome1.isSelected()){
                    filtro.setNome(txtPesquisa.getText());
                }else if(rdCpf.isSelected() && txtPesquisa.getValue() != null){               
                    filtro.setCpf(txtPesquisa.getText());                     
                }else if (rdCpf.isSelected() && txtPesquisa.getValue()==null){
                    filtro.setCpf("111.111.111-11");                   
                }
                return filtro;
            }
        }catch(ViolacaoRegraNegocioException ex){
           Logger.getLogger(TelaCliente.class.getName()).log(Level.SEVERE, null, ex); 
        }
        return null;   
    }

    @Override
    protected Funcionario novaEntidade() {
        return new Funcionario();
    }
}
